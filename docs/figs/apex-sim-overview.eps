%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 742.000000 513.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2555) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 742 513
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 742 513
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /t put
dup 35 /a put
dup 36 /g put
dup 37 /e put
dup 38 /space put
dup 39 /parenleft put
dup 40 /F put
dup 41 /parenright put
dup 42 /D put
dup 43 /R put
dup 44 /M put
dup 45 /W put
dup 46 /B put
dup 47 /C put
dup 48 /o put
dup 49 /d put
dup 50 /i put
dup 51 /s put
dup 52 /r put
dup 53 /P put
dup 54 /U put
dup 55 /colon put
dup 56 /v put
dup 57 /c put
dup 58 /less put
dup 59 /n put
dup 60 /greater put
dup 61 /u put
dup 62 /underscore put
dup 63 /m put
dup 64 /p put
dup 65 /comma put
dup 66 /l put
dup 67 /b put
dup 68 /y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







3E0233321E024355020E292E2F133B593B1D1E3B593C365A1502013B10243B2C2C3E271211263C2B293D27130205FD36010A171F12082A49623737624B2C272B46FE2648382221364726244637222036450000000001003D0000014D0213000E0027BA0003000100032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910303113113335343E02333526060723353D55142C4833455A1F020205FDFBE6324D361C5A023C3F6D000001001FFFF501D60211003A00ABBA0000000100032BBA0020001F00032BB8002010BA0031001F0020111239B800312F410500DA003100EA003100025D411B0009003100190031002900310039003100490031005900310069003100790031008900310099003100A9003100B9003100C90031000D5DB8000BDCB8000010B8002ADCB80015DCB8000B10B8003CDC00BA0036000600032BB8003610BA0025001A00032BB8002510B8000610B80000DCB8002510B8001FDC303137231E0333323E0235342E02272E0335343E0233321E0217332E0323220E0215141E0415140E0223222E02745502243C4E2B274F3F271D2F3D201E3C301F142027131529221602550322394A2C22453723324B584B3218252C141A312718A3304329120F263E2F2532211407070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B8000210B80016D0B800162FBA001700020001111239B8000210B80018D0B800182F00B800012FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855112A443339541B020205FEDC233B2C183830015EFEAC2A45321B2D30520000000001000E000001E602050007001900B800012FB800052FB800002FBA000400000001111239303121132303230323130129BD598D02915FC00205FE5101AFFDFB00010008FF3101EC020500160086B800142B00B800014558B800112F1BB9001100083E59B800014558B800152F1BB9001500083E59B800014558B800052F1BB9000500063E59BA000900050011111239B9000C0002F441110007000C0017000C0027000C0037000C0047000C0057000C0067000C0077000C00085D41050086000C009600

00>] def
/CharStrings 38 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/comma 4 def
/colon 5 def
/less 6 def
/greater 7 def
/B 8 def
/C 9 def
/D 10 def
/F 11 def
/M 12 def
/P 13 def
/R 14 def
/S 15 def
/U 16 def
/W 17 def
/underscore 18 def
/a 19 def
/b 20 def
/c 21 def
/d 22 def
/e 23 def
/g 24 def
/i 25 def
/l 26 def
/m 27 def
/n 28 def
/o 29 def
/p 30 def
/r 31 def
/s 32 def
/t 33 def
/u 34 def
/v 35 def
/y 36 def
/uni2B91 37 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9319293CFDFFDF66CFE9885998F65FE6E49EC9C7C15B8E78E1E7286DA621C56362171FEE49C2F1BF23FBB67B094DD4D3359D21DEF6C2353649B9E7F69B529243CC75281823F9F689AC429A724148A3EB354B35D1E6A5B4905FAECC90A8494BE00208EB4A93D5338049F8F3586D562D2C46E30670DF42398ACC7427CF9D96B81B560028FAA9F364297948E4C262BBADE80B702DEC531C8E8A4F7F9443A006283DD701262F29D92BA0322FF6BF393CD981863D114C6761D1D86F03A27EAC2957B1B1786A537071500A46F1FD01E67AF93F891026AA12D18CB16743FD02F38D9701228D2B3D656179626D195D64C7718C7D7D567E3B4A96C9DE0B6DC62F5C9091062449697E50931AD38DB5EF6A21B466159364D7B75DCBC44656197F08F7F9D881AEE99BEE141DEA8AF53691EC3C0C16A9C0A808F7ECB07807A2AB7E08473D52B9DC3E562E5753EB5228EC39C25DEC835956285F94D8B54C2852E77100147273EEAB32294C2C4D0BB7640F0A33348D79F9301CD01E8ABA52E5390D004EAD229711A6CBAA9698F52286E0ACFC7764BA3CE9964D622E0F88DE165A89BD9C6646DDEE92C2AF19DD997F1CFF720A433F31055305C9520AE1CCD5A52DAB4B8F5274E782395CE71F53B2F3196A78BAF6AAA3F492BD6DCD95E738CD656BEF91C1C161EB8575DDED290C9A8CF06366AC110055FDCE9A914A02D0DF07724C4A327D0F979C2245507CAE7FEFC70EE5E195CBDAAD260125EA3BC27DDA6813E53F7D9839633FFB2B
258AB6AF5719F62445D0D97D752B69E859A87916A3DB7C5E08CAE4070C4652326F34770F5DD40CD1DA5C0FCF3505F7B9EB08081411F80D60E4C6CC9FE58334CBDBFDEB46270E4093CBD0420BD3DD1A7AD58022C0CA49F069D255F79EA7195418BC2D452EE1829E9274CF8B5B139A8E0D117E58F4E808A84E6BC980176B87EFC964F7290CD00CD20D7D81632495D9B7E01E86E61334C04D6ECBC9CE15FEE05F41D0A10CCF0EA6BD12E6468310DEF5C411D9851B2E7241263CB35A84B75E0A00C243B795FE82F5B3B615E6921A8D8BC790ACAF483B2F223C65C9AF5E27AC40475BAF4E30C6F2B8CC956E7633BEB4814002D9F400775A236C2F7AF33B3C31530A0AD22C84C3BA320ED3BA4A7B31B93CCF4BDF4907C5998839B80E513CD9A10F86811894BFEEFF531C19C909C5F47C47D55191CC3B2634949E5C4547E1BB95C31D16ADBE4AAB3B83F73D639A503BA50B74D96FEBBD41FAB26C0108CCC7ACB6B2D6FA0E4262A324EFBEC8EF23E8901DAC8F4171F8DADBD105E9083BB49C4E1507274AF312E11CC481880DD880C9DD07E4DBCF7922D36AFD8F54E02979D369D0491838E61C1DDC37797BF79C56BA10896D71DFFA4CF82A10B68085F71987E90BB534471B2C3E0FAAE48B489DC47727AC152E3E4A3A43000BA9B5FDCCC74A21DA20F062AE74FEBB34F3820671AC8AFF398D73AD54F70560468E0AB10A50303FC03C683B7DF55C8C3AE274159F39A88D87A219DAFED6FCF283C8880F3851DC8038581A7458157ED22575E9AF42BA9441367C511F00A2F5A39CE283ABDB9AB6A0DCF5008AE573BF138F8D03C64CA2F940A7997C2D1F76142D807F3CB5A5D6EC834E0F5CA4973FB05B1F1F1B9D7E520DE39E84EEC3848EEF6AE099277739F613C72EB455D1835151C06254AE1658DA71A17C6FEA46D4DF999027F5145AA0B5FFFBF6A9D5F56C794700E49983B9DF06D9AB03B07EB2204425F13E2D1802AB7E95B59242961445D556EC1213DEB66D40C512BFF2D7F59FE1E3540C8160D186F668DC3C4E0D29BF571DC6DE6734237B8A2002597E46D5313A60641425A6203F2E4BAC62EC5DE727871C6889715FDAED3D74A8E6D9639075B0AF1081304861BBC5BC12FB5A2C0FBEBCA64EB9186BC8F5CC358C6BFFA2BC70550D46723278D72DBB19E97CA02FFA67E4A6A8F63623F860914F6CC4BEC65AA55043E16A2E925DB157CE50461A271A49362A6033409F38D83535A75E9A3655FA9A82A60F8B506221FDB20626F52655814F1ACC2291183E08A57FF775A79EC3BB56292EDA2A8F859A651545409AE2EBC26EA6F7FA28A321D6746B1A9B9E57615A3FB423AD4F03BEDF0753AA65345894156203D671695192FB148C9950644632D20BB30740693FC5F250DA779FDDF3DE398AE23B0497F6B246256E47016DAC55D452796A8C93D3A01C76BC0546A05E6D
479EA8338595FD3EA0CC7687E1F332E0E30F195F84A5B5878D33768D5F5E3A567D0678341696996001D5B715117630CAF053740B7DEF93584EF37B38135EA234EEE166D9487223D5355ABD6DEDD76BC0C47294BD0516525269171D721BC3A2668F67C8CB304543EF9451F492174A0D4C7DB1921F6D8ADF35EBBC0F650AABCA7E426A176BA294A75EF24D0F784835DEA5B846A1B904D16ED52D2EA3FF4ECA9ADD06BD6A3B9F43BFE6C1292977D372AFC82D3411A9EA628F21C6AC5CB99F8F95827F4F45270AB69195C7D2F5881DA0137B86469B87A49EE4700F7104C6D3E1B2F0ECC31196BD6D2A96C4C36A54C11F7F89057620A3053FB85BED4FA1DA07BBD72AAC204E285986E85A3997D61701268F0E2289404B74D20F7F8E78D117A0467F8F166784042E4208112F80E90C5942A4B89D6BF9F5897EA27F0BA92A58E2200116219E628B6A345D51E6BC62A34D98646F1A99033242CBD0AEA63313137551B692FD2B38FF2E0187E6823878E1CFB23B4B1EBAB1BD0F84E6247E348F961DDBF406DB6F634DDF3918BE596155565159A48C85896B788D3F713990B7E62A311BA38AE23014398283B152E6EC0D7A6023FCEEC379AA5741EC6ADBB1F4B4B47817B39A23139BD8962743B762D5C0A4FB39F4B654F29D0109F63E7BB23884D75322BC5161B360DD12796DCBA593823BEF51D8B525245E74CF319E6125FAEC10ADB2063A2D6B06615BA418B12F47E0F408BFE932ABDC99BE4A875E5747166E2DD5742CB9A418C95CBD40A769AF6D76B20B7976EF07AAA9DFD7E20E66B3794C6C8CD536CF6D6ACB3F1718A83B3B23E0E34FCE0397380C9B4DAD38C37F200ACD83E7DFE19B5C992272AD74927905008BEA1D4EE2252B615DB6461B7437F88AEC8987A62CE6713D6A55ACCD492747492ADBEA5B4F544D21545DD9F5EED514FEA1107F8556AF812B6E54A75C2B280C17FF3E9EF0A65A4EF2769F7C01BB46D69B5B3A8ED7E913D2863D042C51055B7DBD2B71855992F1F4AD0E8BDA58BBD892E825AAE7430757BBF186132E14F48B0DA575AB64221C7187D97E62C6717EAE5A7A17B1A125B32CBC59F49878089DE226DD64F0CF7A5817A2F6DA127EBE67DFD98802B399AF1662CE813A27452F91FCE5A922FA72EFE2EEE48367E5C279EFA43837435859C798A15D3C77DCC90B537455DDF376EDDC206290CAB4575761B5ACCC8B7AFBA819D7B15FDA4D20FAE2D0C5DDA57965E8EC6C31470A6F8867A314FA878F73637164C25D346B0F81293D884DA0945DF6D98AA35277CA916F12D7024C6A001D0DEAB4213667FC39749AF2EB5A3850F39EC03B7746855BE85C8FD561C829FD3A9B6476DC3080FF1E101339DAB43A5659CC57690BE5621F67652A6B92C431171CEEA2004BA44A0B57E69EA3313AF89BA71041AB7E9C5ECEC047BE0022EC22D15E387126DCB2



89C6D7E29A917471535A561244B2A89B0600CCD16E68E7DF1D49C28193BE993658AEBEEE5E6576B77C97979DF6DFEE6A9814987CB72AFC8281767A1D7A8785F581F92B30D8D37AE3877A6BCA5A9A2D72F80F0EECBE43288E88D64EFEFA394BA795E7244490D599F287967824B5EB7E2D264A772219C64E0B8D0BD59F0EF649DA39A792FE39EBE65E0F4396597E6080C85929A58E94B7A8A6CFD1F0B6CE68F800AA62B32A2BA94F26AE5020A99A0CE6EB7E445AA03B4F423A280A1541C34335C35146549E5FAEA763B08E4F3C5891F52330D80C93EC9CFAA7F95E4BCDB5A6D30E8B4C1EB75C065DCABCF37028EF72EF27BBE9C378B54EA4C128CA70CFF180A12CC73BDA0748EF5716A85C5ACD40B3C57987DFF02DD3CF4FB51C43959112EDEB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 742 513 rc
1 0 0 -1 -49 533 cm
50 50 m
737 50 l
737 360 l
50 360 l
h
50 50 m
S
0 i
1 1 1 sc
CM
21 348 m
101 348 l
101 308 l
21 308 l
h
21 348 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
70 185 m
150 185 l
150 225 l
70 225 l
h
78 185 m
78 225 l
142 225 m
142 185 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 61 328 cm
/F1.1[ 12 0 0 -12 0 0]sf
-23.886 3.8320007 m
(!"#$%&'\(\))[ 7.776000 3.780000 6.444000 6.888000 6.444000 3.336000 3.108000 6.888000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
121 348 m
201 348 l
201 308 l
121 308 l
h
121 348 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
170 185 m
250 185 l
250 225 l
170 225 l
h
178 185 m
178 225 l
242 225 m
242 185 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 161 328 cm
-15.666 -3.3359985 m
(!"#$%&)[ 7.776000 3.780000 6.444000 6.888000 6.444000 0.000000 ] xS
-14.886 11 m
('*+\(\))[ 3.108000 8.448000 8.220000 6.888000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
251 433 m
331 433 l
331 393 l
251 393 l
h
251 433 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
300 100 m
380 100 l
380 140 l
300 140 l
h
308 100 m
308 140 l
372 140 m
372 100 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 291 413 cm
-23.886 3.8320007 m
(!"#$%&'\(\))[ 7.776000 3.780000 6.444000 6.888000 6.444000 3.336000 3.108000 6.888000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
351 433 m
431 433 l
431 393 l
351 393 l
h
351 433 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
400 100 m
480 100 l
480 140 l
400 140 l
h
408 100 m
408 140 l
472 140 m
472 100 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 391 413 cm
-15.666 -3.3359985 m
(!"#$%&)[ 7.776000 3.780000 6.444000 6.888000 6.444000 0.000000 ] xS
-14.886 11 m
('*+\(\))[ 3.108000 8.448000 8.220000 6.888000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
251 253 m
331 253 l
331 213 l
251 213 l
h
251 253 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
300 280 m
380 280 l
380 320 l
300 320 l
h
308 280 m
308 320 l
372 320 m
372 280 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 291 233 cm
-23.886 3.8320007 m
(!"#$%&'\(\))[ 7.776000 3.780000 6.444000 6.888000 6.444000 3.336000 3.108000 6.888000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
351 253 m
431 253 l
431 213 l
351 213 l
h
351 253 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
400 280 m
480 280 l
480 320 l
400 320 l
h
408 280 m
408 320 l
472 320 m
472 280 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 391 233 cm
-15.666 -3.3359985 m
(!"#$%&)[ 7.776000 3.780000 6.444000 6.888000 6.444000 0.000000 ] xS
-14.886 11 m
('*+\(\))[ 3.108000 8.448000 8.220000 6.888000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
494 348 m
574 348 l
574 308 l
494 308 l
h
494 348 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
543 185 m
623 185 l
623 225 l
543 225 l
h
551 185 m
551 225 l
615 225 m
615 185 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 534 328 cm
-25.667999 3.8320007 m
(!"#$%&',\))[ 7.776000 3.780000 6.444000 6.888000 6.444000 3.336000 3.108000 10.452000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
594 348 m
674 348 l
674 308 l
594 308 l
h
594 348 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
643 185 m
723 185 l
723 225 l
643 225 l
h
651 185 m
651 225 l
715 225 m
715 185 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 634 328 cm
-15.666 -3.3359985 m
(!"#$%&)[ 7.776000 3.780000 6.444000 6.888000 6.444000 0.000000 ] xS
-12.774 11 m
('-.\))[ 3.108000 11.112000 8.220000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
21 113 m
101 113 l
101 73 l
21 73 l
h
21 113 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
70 420 m
150 420 l
150 460 l
70 460 l
h
78 420 m
78 460 l
142 460 m
142 420 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 61 93 cm
-14.556 3.8320007 m
(/01%)[ 8.664000 6.888000 7.116000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
121 113 m
201 113 l
201 73 l
121 73 l
h
121 113 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
170 420 m
250 420 l
250 460 l
170 460 l
h
178 420 m
178 460 l
242 460 m
242 420 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 161 93 cm
-25.218 3.8320007 m
(+%$23"%43)[ 8.220000 6.444000 6.888000 2.664000 6.000000 3.780000 6.444000 3.996000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -49 533 cm
150 205 m
157 205 l
160 205 l
163 205 l
170 205 l
S
250 205 m
261.89999 205 l
275 205 l
275 162.5 l
275 120 l
288.10001 120 l
290.10001 120 l
S
0 i
CM
249.10001 413 m
241.10001 416 l
241.10001 410 l
h
249.10001 413 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
298.10001 120 m
290.10001 117 l
290.10001 123 l
h
298.10001 120 m
S
1 J
1 j
0.60000002 i
250 205 m
261.89999 205 l
275 205 l
275 252.5 l
275 300 l
288.10001 300 l
290.10001 300 l
S
0 i
CM
249.10001 233 m
241.10001 236 l
241.10001 230 l
h
249.10001 233 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
298.10001 300 m
290.10001 297 l
290.10001 303 l
h
298.10001 300 m
S
1 J
1 j
0.60000002 i
380 120 m
391.89999 120 l
390 120 l
388.10001 120 l
390.10001 120 l
S
0 i
CM
349.10001 413 m
341.10001 416 l
341.10001 410 l
h
349.10001 413 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
398.10001 120 m
390.10001 117 l
390.10001 123 l
h
398.10001 120 m
S
1 J
1 j
0.60000002 i
380 300 m
391.89999 300 l
390 300 l
388.10001 300 l
390.10001 300 l
S
0 i
CM
349.10001 233 m
341.10001 236 l
341.10001 230 l
h
349.10001 233 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
398.10001 300 m
390.10001 297 l
390.10001 303 l
h
398.10001 300 m
S
1 J
1 j
0.60000002 i
480 300 m
491.89999 300 l
511.5 300 l
511.5 252.5 l
511.5 205 l
531.09998 205 l
533.09998 205 l
S
0 i
CM
492.10001 328 m
484.10001 331 l
484.10001 325 l
h
492.10001 328 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
541.09998 205 m
533.09998 202 l
533.09998 208 l
h
541.09998 205 m
S
1 J
1 j
0.60000002 i
480 120 m
491.89999 120 l
511.5 120 l
511.5 162.5 l
511.5 205 l
531.09998 205 l
533.09998 205 l
S
0 i
CM
492.10001 328 m
484.10001 331 l
484.10001 325 l
h
492.10001 328 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
541.09998 205 m
533.09998 202 l
533.09998 208 l
h
541.09998 205 m
S
1 J
1 j
0.60000002 i
623 205 m
634.90002 205 l
633 205 l
631.09998 205 l
633.09998 205 l
S
0 i
CM
592.09998 328 m
584.09998 331 l
584.09998 325 l
h
592.09998 328 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
641.09998 205 m
633.09998 202 l
633.09998 208 l
h
641.09998 205 m
S
1 J
1 j
0.60000002 i
723 205 m
766.95166 205.22318 l
S
0 i
CM
725.9516 327.73621 m
717.96692 330.77679 l
717.93646 324.77686 l
h
725.9516 327.73621 m
f
0 J
0 j
1 0 0 -1 -49 533 cm
774.9516 205.26379 m
766.96692 202.22321 l
766.93646 208.22313 l
h
774.9516 205.26379 m
S
1 J
1 j
0.60000002 i
110 420 m
110 234.89999 l
S
0 J
0 j
0 i
110 226.89999 m
107 234.89999 l
113 234.89999 l
h
110 226.89999 m
S
1 J
1 j
0.60000002 i
210 420 m
210 234.89999 l
S
0 J
0 j
0 i
210 226.89999 m
207 234.89999 l
213 234.89999 l
h
210 226.89999 m
S
1 J
1 j
0.60000002 i
683 225 m
683 236.89999 l
683 513.49219 l
445.46875 513.49219 l
210 513.49219 l
210 471.89999 l
210 469.89999 l
S
0 J
0 j
0 i
210 461.89999 m
207 469.89999 l
213 469.89999 l
h
210 461.89999 m
S
1 1 1 sc
CM
494 113 m
574 113 l
574 73 l
494 73 l
h
494 113 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -49 533 cm
543 420 m
623 420 l
623 460 l
543 460 l
h
551 420 m
551 460 l
615 460 m
615 420 l
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 534 93 cm
-12.558 3.8320007 m
(*#"#)[ 8.448000 6.444000 3.780000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -49 533 cm
583 234.89999 m
583 236.89999 l
583 322.5 l
583 408.10001 l
583 410.10001 l
S
0 J
0 j
0 i
583 418.10001 m
586 410.10001 l
580 410.10001 l
h
583 418.10001 m
S
583 226.89999 m
580 234.89999 l
586 234.89999 l
h
583 226.89999 m
S
/Cs3 SC
0 sc
1 0 0 -1 23 498 cm
/F1.1[ 16 0 0 -16 0 0]sf
-16.736 5.776001 m
(/56)[ 11.552000 10.368000 0.000000 ] xS
0 1 1 0 61 205.92188 cm
/F1.1[ 10 0 0 -10 0 0]sf
-52.119999 -2.2799988 m
(3"1778%9"04:3"1773"42;$<)[ 5.000000 3.150000 5.930000 2.780000 2.780000 5.000000 5.370000 5.370000 3.150000 5.740000 3.330000 6.000000 5.000000 3.150000 5.930000 2.780000 2.780000 5.000000 3.150000 3.330000 2.220000 5.560000 5.740000 0.000000 ] xS
-30.094999 10 m
('2;3"4=9"20;>"\))[ 2.590000 2.220000 5.560000 5.000000 3.150000 3.330000 5.560000 5.370000 3.150000 2.220000 5.740000 5.560000 5.000000 3.150000 0.000000 ] xS
0 1 1 0 161 204.74609 cm
/F1.1[ 8 0 0 -8 0 0]sf
-76.664001 -2.223999 m
(3"177?#@:3"1773"42;$A&3"177"=@B%:2;"A&C00B<<)[ 4.000000 2.520000 4.744000 2.224000 2.224000 6.824000 4.296000 4.744000 4.800000 4.000000 2.520000 4.744000 2.224000 2.224000 4.000000 2.520000 2.664000 1.776000 4.448000 4.592000 2.224000 2.224000 4.000000 2.520000 4.744000 2.224000 2.224000 2.520000 4.448000 4.744000 1.776000 4.296000 4.800000 1.776000 4.448000 2.520000 2.224000 2.224000 4.744000 4.592000 4.592000 1.776000 4.800000 0.000000 ] xS
-18.664 8 m
('4%$23"%4>"\))[ 2.072000 2.520000 4.296000 4.592000 1.776000 4.000000 2.520000 4.296000 2.664000 4.000000 2.520000 0.000000 ] xS
0 1 1 0 534 204.34644 cm
/F1.1[ 10 0 0 -10 0 0]sf
-5.4650002 -2.2799988 m
(2;")[ 2.220000 5.560000 0.000000 ] xS
-68.625 10 m
('#114%33#CB%&?%?04D&B09#"20;\))[ 2.590000 5.370000 5.930000 5.930000 3.150000 5.370000 5.000000 5.000000 5.370000 5.930000 2.220000 5.370000 2.780000 8.530000 5.370000 8.530000 5.740000 3.330000 5.000000 2.780000 2.220000 5.740000 5.370000 5.370000 3.150000 2.220000 5.740000 5.560000 0.000000 ] xS
1 0 0 -1 404.58984 19.507812 cm
/F1.1[ 12 0 0 -12 0 0]sf
-114.996 -3.3359985 m
(3"177?#@:3"1773"42;$A&3"177"=@B%:2;"A&C00B<<)[ 6.000000 3.780000 7.116000 3.336000 3.336000 10.236000 6.444000 7.116000 7.200000 6.000000 3.780000 7.116000 3.336000 3.336000 6.000000 3.780000 3.996000 2.664000 6.672000 6.888000 3.336000 3.336000 6.000000 3.780000 7.116000 3.336000 3.336000 3.780000 6.672000 7.116000 2.664000 6.444000 7.200000 2.664000 6.672000 3.780000 3.336000 3.336000 7.116000 6.888000 6.888000 2.664000 7.200000 0.000000 ] xS
-27.996 11 m
('4%$23"%4>"\))[ 3.108000 3.780000 6.444000 6.888000 2.664000 6.000000 3.780000 6.444000 3.996000 6.000000 3.780000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
